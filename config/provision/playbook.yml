---
- hosts: 'all'
  remote_user: 'root'

  # В данном блоке объявляются переменные, которые будут использоваться в playbook и конфигах, представленных выше
  vars:
    # Версия ruby
    ruby_version: '2.0.0-p643'
    # Пользователь, от лица которого будет происходит деплой
    user: 'deploy'
    # Домашняя директория
    home: '/home/{{ user }}'
    # Директория установки Rbenv
    rbenv_root: '{{ home }}/.rbenv'
    # Название приложения
    name: 'myuniver'
    # Путь до нашего приложения
    application: '{{ home }}/applications/{{ name }}'

  # Список задач, которые будут выполнены последовательно
  tasks:
    # Обновление кеша и установка необходимых пакетов, всего программного обеспечения,
    # необходимого для работы нашего сервера
    - name: 'apt | update'
      action: 'apt update_cache=yes'

    - name: 'apt | install dependencies'
      action: 'apt pkg={{ item }}'
      # with_items - это обычный цикл в Ansible, он возьмёт и прогонит все его элементы через action
      with_items:
        - 'build-essential'
        - 'libssl-dev'
        - 'libyaml-dev'
        - 'libreadline6-dev'
        - 'zlib1g-dev'
        - 'libcurl4-openssl-dev'
        - 'git'
        - 'nginx'
        - 'redis-server'
        - 'postgresql'
        - 'postgresql-contrib'
        - 'libpq-dev'
        - 'imagemagick'
        - 'libmagickwand-dev'
        - 'nodejs'
        - 'htop'

    # Создаём нашего пользователя deploy, копируем авторизационный ключ,
    # а так же публичный и приватный ssh ключи
    - name: 'account | create'
      user: 'name={{ user }} shell=/bin/bash'

    - name: 'account | copy authorized keys'
      # shell - это модуль Ansible, который позволяет выполнять обычные bash команды
      shell: 'mkdir -p {{ home }}/.ssh -m 700 && cp /root/.ssh/authorized_keys {{ home }}/.ssh && chown -R {{ user }}:{{ user }} {{ home }}/.ssh'

    - name: 'account | copy ssh private key'
      # Модуль copy просто берёт и копирует файл из папки src в папку dest
      copy: 'src=keys/id_rsa dest={{ home }}/.ssh/id_rsa owner={{ user }} group={{ user }} mode=0600'

    - name: 'account | copy ssh public key'
      copy: 'src=keys/id_rsa.pub dest={{ home }}/.ssh/id_rsa.pub owner={{ user }} group={{ user }} mode=0644'

    # Устанавливаем ruby-build, rbenv, bundler (шаги взяты из инструкции к установке rbenv)
    - name: rbenv | install build depends
      apt: pkg={{ item }} state=latest install_recommends=no
      with_items:
        - build-essential
        - git
        - libcurl4-openssl-dev
        - libmysqlclient-dev
        - libreadline-dev
        - libssl-dev
        - libxml2-dev
        - libxslt1-dev
        - zlib1g-dev

    - name: rbenv | update rbenv repo
      git: repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} version=v0.4.0

    - name: rbenv | add rbenv to path
      file: path=/usr/local/bin/rbenv src={{ rbenv_root }}/bin/rbenv state=link

    - name: rbenv | check ruby-build installed
      command: test -x /usr/local/bin/ruby-build
      register: rbuild_present
      ignore_errors: yes

    - name: rbenv | create temporary directory
      command: mktemp -d
      register: tempdir
      when: rbuild_present|failed

    - name: rbenv | clone ruby-build repo
      git: repo=git://github.com/sstephenson/ruby-build.git dest={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed

    - name: rbenv | install ruby-build
      command: ./install.sh chdir={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed

    - name: rbenv | remove temporary directory
      file: path={{ tempdir.stdout }} state=absent
      when: rbuild_present|failed

    - name: rbenv | check ruby {{ ruby_version }} installed
      shell: RBENV_ROOT={{ rbenv_root }} rbenv versions | grep {{ ruby_version }}
      register: ruby_installed
      ignore_errors: yes

    - name: rbenv | install ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv install {{ ruby_version }}
      when: ruby_installed|failed

    - name: rbenv | set global ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv global {{ ruby_version }}
      when: ruby_installed|failed

    - name: rbenv | rehash
      shell: RBENV_ROOT={{ rbenv_root }} rbenv rehash
      when: ruby_installed|failed

    - name: "configuring locales"
      shell: export LANGUAGE="en_US.UTF-8" && echo 'LANGUAGE="en_US.UTF-8"' >> /etc/default/locale && echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale
        

    # Устанавливаем posgresql, создаём пользователя, копируем конфиги и создаём конечную базу данных


    # Rails setup | копируем settings.yml с нашими настройками

    # Установка и настройка веб сервера nginx
    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}.conf'
      register: 'nginx_config_copied'
      ignore_errors: yes

    - name: 'nginx | createdir'
      shell: 'rm /etc/nginx/sites-enabled/default; mkdir -p etc/nginx/sites-enabled/'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | copy config'
      template: 'src=configs/nginx.conf dest=/etc/nginx/sites-enabled/{{ name }}.conf owner=root group=root mode=0644'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | restart service'
      # Модуль service - это ещё одна удобная обёртка, указываем какой сервис и что с ним необходимо сделать
      service: name=nginx state=restarted
      when: 'nginx_config_copied|failed'
